version: 2.1
orbs:
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here
    parameters:
      id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend stack
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 0cb5e8ce-7c45-4db3-84e4-d260771749fb" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if(( "$SUCCESS"=="success" )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi
          # Add when this will run
          when: << parameters.when >>
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-1]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-1
      - persist_to_workspace: # one of save_cache and persist_to_workspace should be enough
          root: .
          paths:
            - frontend/node_modules
            - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
            - backend/dist
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build-1]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build-1]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd frontend
            npm update
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout #checkout code from git
      - run: yum install -y tar #(install dependencies)
      - run: yum install -y gzip #(install dependencies)
      - run:
          name: Ensure back-end infrastructure exists #(deploying backend. get backend ip and save to memstash for frontend use)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-tag \
              --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            URLS=$(aws ec2 describe-instances --region us-east-2 --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text)
            echo "URLS=$URLS" 
            curl -H "Content-Type: text/plain" -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}  
      - run:
          name: Ensure front-end infrastructure exist #(deploying frontend)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-tag \
              --stack-name Udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      #- destroy_environment:
       #   workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ec2 ip to ansible inventory file 
          command: |               
            export backend_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=ebackend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt)
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
       #destroy env # Here's where you will add some code to rollback on failure
       #  set to trigger email notification on failure
     # - revert-migrations
      #- destroy-environment

  configure-infrastructure: # write code to setup EC2 to run as backend
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8f:73:3d:76:19:14:8c:e2:ad:21:bf:5e:3b:14:35:84"]
      - attach_workspace: # to get access to all files needed e.g. inventory.txt
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Setup inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt main.yml
      #- revert-migrations
      #- destroy-environment  

  run-migrations: #preparing data needed for backend application to run
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
          #paths:
            #- project/
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
            pwd
            ls -la
      - run:
          name: add values to .env files # Create a `backend/.env` file and add those values there dynamically
          command: |
            echo PWD
            pwd
            #ls -la
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:9}" \
            --request GET https://api.memstash.io/values/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["84:ae:8c:a3:69:35:a3:13:d4:d0:3a:f7:5d:c3:db:c4"]
      - attach_workspace: # to get access to previously generated inventory.txt
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            apk add --update openssh-client
      - run:
          name: Setup inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $URLS >> inventory.txt
            cat inventory.txt
      - run:
          name: add values to env files to EC2
          command: |
            echo ENVIROMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"           
      - run:
          name: Compress Backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy Backend
          no_output_timeout: 30m
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      
      #- revert-migrations
     # - destroy-environment

  smoke-test:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm
            pip install awscli
      - run:
          name: get backend URL and back end smoke test
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
            echo ${BACKEND_IP}
            export URL="http://$BACKEND_IP:3030/api/status"
            echo $URL
            curl $URL
#       - run:
#         name: Get backend url and backend smoke test
#          command: |
#            BACKEND_IP=$(curl -H "token: 1e1e96f7-a791-42b5-b240-bd5407aa9c51" --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
#            export URL="http://$BACKEND_IP:3030/api/status"
#            echo $URL
#            curl $URL
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-us-east-2.amazonaws.com/index.html#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
     # - revert-migrations
      #- destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend] 

